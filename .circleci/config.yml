version: 2.1

# Orbs: Pre-configured bundled functionality
orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecr-old: circleci/aws-ecr@6.1.0
  aws-ecr: circleci/aws-ecr@6.10.0
  assume-role: airswap/assume-role@0.2.0
  slack: circleci/slack@3.4.0
  aws-ecs: circleci/aws-ecs@2.0.0
  pocket: pocket/circleci-orbs@1.2.8

# Commands: Setting up some tasks to avoid a lot of boilerplate
commands:
  setup:
    description: "Preparing the environment"
    steps:
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      # Checkout source code into the working_directory.
      - checkout
      # Restores a previously saved cache based on a key.
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            corepack enable
            corepack prepare pnpm@latest-8 --activate
            pnpm config set store-dir .pnpm-store
      # Install javascript dependencies
      - run:
          name: Install dependencies
          command: pnpm install
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - .pnpm-store
            - ./.next/cache

# Jobs: Setting up tasks for CI to execute
jobs:

  # ——————————————————————————————————————————————————————————————
  # Lint: Make sure code is free from silly mistakes
  # ——————————————————————————————————————————————————————————————
  lint:
    # CPU and RAM resources for the job.
    resource_class: small
    # Define the container we will run the task in (standard node)
    docker:
      - image: cimg/node:20.10.0
    steps:
      # Setup Environment
      - setup
      - run: mkdir ~/junit
      # Run tests
      - run:
          name: Eslint
          command: pnpm lint


  # ——————————————————————————————————————————————————————————————
  # Unit Test: Make sure code is free from testable errors
  # ——————————————————————————————————————————————————————————————
  unit_tests:
    # CPU and RAM resources for the job.
    resource_class: medium
    parallelism: 5
    # Define the container we will run the task in (standard node)
    docker:
      - image: cimg/node:20.10.0
    steps:
      # Setup Environment
      - setup
      - run: mkdir ~/junit
      # Run tests
      - run:
          name: Run unit tests
          command: |
              TEST=$(circleci tests glob src/**/*.spec.js | circleci tests split --split-by=timings)
              pnpm test:ci $TEST -- -w=50%
      - run:
          command: cp junit.xml ~/junit/
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit


  # ——————————————————————————————————————————————————————————————
  # Release: This will tag the branch and generate a changelog
  # ——————————————————————————————————————————————————————————————  
  release:
    # CPU and RAM resources for the job.
    resource_class: small
    # Define the container we will run the task in (standard node)
    docker:
      - image: cimg/node:20.10.0
    steps:
      - setup
      - add_ssh_keys:
          fingerprints:
            - '95:3f:a9:02:0d:06:71:f9:5d:90:1e:a0:e5:e3:c3:25'
      # Semantic Release
      - run: pnpm dlx semantic-release
      - run:
          name: Check for new release
          command: |
            if [ -f ".version" ]; then
              echo "We have a semantic release"
            else
              echo 'No semantically releasable changes.'
              echo `git describe --abbrev=0 --tags` > .version
            fi  
            cp .version /tmp/workspace/.version
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .version
  
  # ——————————————————————————————————————————————————————————————
  # Build Deployment: This builds the nextjs deployment
  # This is used for features and production
  # @prefix {String}: Provide asset prefix to use CDN for css/js files
  # NOTE: NextJS does not automatically prefix media assets.
  # ——————————————————————————————————————————————————————————————
  build_app:
    parameters:
      prefix:
        description: The assets prefix
        type: string
        default: ""
      showdev:
        description: Including dev tools
        type: string
        default: ""
    # CPU and RAM resources for the job.
    resource_class: medium
    # Define the container we will run the task in (standard node)
    docker:
      - image: cimg/node:20.10.0
    steps:
      # Setup Environment
      - setup
      - add_ssh_keys:
          fingerprints:
            - "95:3f:a9:02:0d:06:71:f9:5d:90:1e:a0:e5:e3:c3:25"
      - run:
          name: Setup common environment variables
          command: |
            echo 'export RELEASE_VERSION="$(cat /tmp/workspace/.version)"' >> $BASH_ENV
      - run:
          name: Set version
          command: |
            mkdir -p config
            echo "module.exports = '$CIRCLE_SHA1';" > ./config/version.js
      - run:
          name: Build
          command: RELEASE_VERSION=${RELEASE_VERSION} ASSET_PREFIX=<<parameters.prefix>> SHOW_DEV=<<parameters.showdev>> NODE_ENV=production npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r . /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

   # ——————————————————————————————————————————————————————————————
  
  # ——————————————————————————————————————————————————————————————
  # Push Production Assets:
  # Push built deployment to the s3 bucket for client side caching
  # ——————————————————————————————————————————————————————————————
  push_production_assets:
    docker:
      - image: circleci/python # for aws cli without fluff
    steps:
      - run:
          name: Setup environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="${OLD_AWS_ACCESS_KEY_ID}"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="${OLD_AWS_SECRET_ACCESS_KEY}"' >> $BASH_ENV
      - aws-cli/install
      - assume-role/assume-role:
          account-id: $ACCOUNT_ID_PROD
      - attach_workspace:
          at: .
      - run:
          name: Push
          command: |
            aws s3 cp \
            --recursive \
            --acl public-read \
            --metadata-directive REPLACE \
            --cache-control max-age=31536000 \
            --include "*" \
            --exclude "BUILD_ID" \
            app_prod/.next s3://readitlater-deploy/web-client/_next

  # ——————————————————————————————————————————————————————————————
  # !! NEW ALB
  # Build the app along with the docker image to use for this version
  # Will push the docker image to ECR (Elastic Container Repository)
  # ECS will access this image to build a container to run the app
  # ——————————————————————————————————————————————————————————————
  docker_build:
    parameters:
      tag:
        description: 'The docker tag name'
        type: string
      environment:
        description: 'The environment name'
        type: string
      ecr_url:
        description: 'The ecr url'
        type: string
      repo_name:
        description: 'The ecr repo name'
        type: string
      push:
        # This allows us to test that the image can be built without
        # without pushing broken code to production 
        description: 'Whether or not to push the code'
        type: boolean
        default: false
    docker:
      - image: pocket/ops-cli:v0.0.5
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Setup common environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr_url >>"' >> $BASH_ENV
            echo 'export AWS_REGION=${<< parameters.environment >>_AWS_DEFAULT_REGION}' >> $BASH_ENV
            echo 'export RELEASE_VERSION="$(cat /tmp/workspace/.version)"' >> $BASH_ENV
      - run: 
          name: "What version is being built?"
          command: echo ${RELEASE_VERSION}
      - when:
          condition: <<parameters.push>>
          steps:
            - aws-ecr/build-and-push-image:
                checkout: false
                repo: << parameters.repo_name >>
                setup-remote-docker: true
                path: /tmp/workspace/app_prod
                aws-access-key-id: << parameters.environment >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.environment >>_AWS_SECRET_ACCESS_KEY
                tag: << parameters.tag >>
                extra-build-args: --build-arg RELEASE_VERSION=${RELEASE_VERSION}
      - unless:
          condition: <<parameters.push>>
          steps:
            - setup_remote_docker
            - aws-ecr/build-image:
                repo: << parameters.repo_name >>
                tag: << parameters.tag >>
                path: /tmp/workspace/app_prod
                extra-build-args: --build-arg RELEASE_VERSION=${RELEASE_VERSION}

  # ——————————————————————————————————————————————————————————————
  # !! NEW ALB
  # That's it. Crazy.
  # ——————————————————————————————————————————————————————————————


# Workflow switches
not_main: &not_main
  filters:
    branches:
      ignore:
        - main
        
only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

# Workflows: Executing jobs we have defined based on specific branch changes
workflows:
  version: 2
  all:
    jobs:
      # lint all the files
      - lint:
          <<: *not_main
      # unit test all the files
      - unit_tests:
          <<: *not_main
      # Generate a changelog tag when main is updated
      - release:
          <<: *only_main
      # conditionally building deployment with or without asset prefix
      - build_app:
          <<: *only_main
          prefix: "https://assets.getpocket.com/web-client"
          showdev: ""
          name: build_app_production
          requires:
            - release
      # we are building on branch to make sure there are no build errors
      - build_app:
          <<: *not_main
          prefix: ""
          showdev: "included"
          name: build_app_dev

      # conditional push production build and assets (css/js) for main branch
      - push_production_assets:
          <<: *only_main
          requires:
            - build_app_production

       # Try building the ECS docker image on each branch
       # !! This pushes to a dev account
       # !! Change this to not_main instead of getting rid of it
      - docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          # dev-app is based on how its created in shared infrastructure
          # https://github.com/Pocket/shared-infrastructure
          repo_name: webclient-dev-app 
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build_app_dev # Make sure build is not funky and change this to that

      # Build & Deploy the Dev Docker Image
      - docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: webclient-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build_app_dev
      
      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: WebClient-Dev-CodePipeline
          codebuild-project-name: WebClient-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          environment: 'Prod'
          tag: latest,$CIRCLE_SHA1
          repo_name: webclient-prod-app
          ecr_url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build_app_production

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: WebClient-Prod-CodePipeline
          codebuild-project-name: WebClient-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod
            - push_production_assets

      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: WebClient

      # !! This pushes to a dev account
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: WebClient

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/web-client
          sentry_project_name: web-client
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

