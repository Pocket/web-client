version: 0.2
#https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

#####
# Performs an infrastructure deployment.
# For Code Deployments see CircleCI and AWS CodeDeploy
#####

run-as: circleci

env:
  variables:
    MAIN_BRANCH_REF: 'refs/heads/main'
    MAIN_BRANCH: 'main'
    #The ref of the dev branch we work against
    DEV_BRANCH_REF: 'refs/heads/dev'
    DEV_BRANCH: 'dev'
    #Metaflow requires a username to run
    USERNAME: 'codebuild'
    TFCMT_REPO_OWNER: 'Pocket'
    TFCMT_REPO_NAME: 'web-client'
  secrets-manager:
    #Pull in the default terraform cloud token
    TERRAFORM_TOKEN: 'CodeBuild/Default:terraform_token'
    PAGERDUTY_TOKEN: 'CodeBuild/Default:mozilla_pagerduty_token'
    GITHUB_ACCESS_TOKEN: 'CodeBuild/Default:github_access_token'
    GITHUB_TOKEN: 'CodeBuild/Default:github_access_token'

#All phases are ran within the pocket/pocket-build:prod docker image
phases:
  pre_build:
    run-as: circleci
    commands:
      - |
        . /home/circleci/.codebuild_shims_wrapper.sh
        curl -L https://github.com/suzuki-shunsuke/tfcmt/releases/download/v4.8.0/tfcmt_linux_amd64.tar.gz | tar xvzf - tfcmt
        mv tfcmt /home/circleci/tfcmt
        chmod a+x /home/circleci/tfcmt
        echo $CODEBUILD_WEBHOOK_HEAD_REF
        echo Setting Up Terraform Token
        rc="credentials \"app.terraform.io\" { "
        rc="${rc} token=\"$TERRAFORM_TOKEN\" "
        rc="${rc}}"
        echo "$rc" > ~/.terraformrc
        echo Setting Github Access Token
        echo "//npm.pkg.github.com/:_authToken=${GITHUB_ACCESS_TOKEN}" > ~/.npmrc
        echo Setting environment variables
        cd .aws
        nvm install --no-progress
        nvm use
        npm ci
        tfenv install
        tfenv use
        npm run build
        if [ "$GIT_BRANCH" = "$DEV_BRANCH" ]; then NODE_ENV=development npm run synth; else npm run synth; fi
        cd cdktf.out/stacks/web-client
        terraform init
  build:
    run-as: circleci
    commands:
      - echo Build started on `date`
      ### If the branch is not main and its not dev, lets do a plan on prod.
      - 'if [ "$CODEBUILD_WEBHOOK_HEAD_REF" != "$MAIN_BRANCH_REF" ] && [ "$CODEBUILD_WEBHOOK_HEAD_REF" != "$DEV_BRANCH_REF" ]; then terraform plan -lock=false -refresh=false -no-color; fi'
      #### If the branch is dev, lets do an apply on dev.
      - 'if [ "$GIT_BRANCH" = "$DEV_BRANCH" ]; then terraform apply -auto-approve -no-color; fi'
      #### If the branch is main lets apply.
      - 'if [ "$GIT_BRANCH" = "$MAIN_BRANCH" ]; then terraform apply -auto-approve -no-color; fi'
  post_build:
    run-as: circleci
    commands:
      - 'if [ "$GIT_BRANCH" = "$MAIN_BRANCH" ] || [ "$GIT_BRANCH" = "$DEV_BRANCH" ]; then cp appspec.json taskdef.json ../../../../; fi'
      # get back to the root dir
      - cd ../../
      - echo Build completed on `date`

artifacts:
  files:
    - taskdef.json
    - appspec.json
