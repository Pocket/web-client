name: Build App
on:
  workflow_call:
    inputs:
      terraform-output:
        description: 'The terraform output which is used to get the ECS_Service and Task Defintion arns for codedeploy for web client'
        required: false
        type: string
      app-path:
        description: 'The path where the client is outputed by turbo repo build'
        required: true
        type: string
      scope:
        description: 'The scope of the client to build'
        required: true
        type: string
      docker-repo-name:
        description: 'The docker repo name to push the image to'
        required: true
        type: string
      release-version:
        description: 'The release version to use for the build'
        required: true
        type: string
      assets-prefix:
        description: 'The asset prefix to use for the build'
        required: true
        type: string

permissions:
  contents: write  # This is required for actions/checkout and write to be able to write releases
  pull-requests: write # to be able to comment on released pull requests
  id-token: write  # Access the Github JWT for AWS access
  deployments: write

jobs:
    pull-request:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4 
        - name: Build Client
          uses: './.github/actions/containerize'
          with:
              docker-repo-name: "410318598490.dkr.ecr.us-east-1.amazonaws.com/${{inputs.docker-repo-name}}-dev-app"
              app-path: ${{inputs.app-path}}
              app-port: 3000
              context: '.'
              dockerhub-username: ${{secrets.DOCKERHUB_USERNAME}}
              dockerhub-token: ${{secrets.DOCKERHUB_TOKEN}}
              scope: ${{inputs.scope}}
              sentry-project: ''
              sentry-token: ${{secrets.SENTRY_BEARER}}
              assets-prefix: https://pocket-assets-dev.s3.amazonaws.com/${{inputs.assets-prefix}}
              release-version: ${{inputs.release-version}}
    development:
      if: github.ref == 'refs/heads/dev'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4 
        # Get the AWS credentials
        - name: AWS Credentials
          id: aws-creds
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: us-east-1
            role-to-assume: arn:aws:iam::410318598490:role/PocketGHARole
        - name: Build Client
          id: docker-build
          uses: './.github/actions/containerize'
          with:
            docker-repo-name: "410318598490.dkr.ecr.us-east-1.amazonaws.com/${{inputs.docker-repo-name}}-dev-app"
            push: true
            app-path: ${{inputs.app-path}}
            app-port: 3000
            context: '.'
            dockerhub-username: ${{secrets.DOCKERHUB_USERNAME}}
            dockerhub-token: ${{secrets.DOCKERHUB_TOKEN}}
            scope: ${{inputs.scope}}
            sentry-project: ''
            sentry-token: ${{secrets.SENTRY_BEARER}}
            assets-prefix: https://pocket-assets-dev.s3.amazonaws.com/${{inputs.assets-prefix}}
            release-version: ${{inputs.release-version}}
            s3-bucket: pocket-assets-dev
            s3-path: ${{inputs.assets-prefix}}
            aws-access-key-id: ${{ steps.aws-creds.outputs.aws-access-key-id }}
            aws-secret-key: ${{ steps.aws-creds.outputs.aws-secret-access-key }}
            aws-session-token: ${{ steps.aws-creds.outputs.aws-session-token}}
        - name: Code Deploy Docker Image
          uses:  pocket/pocket-monorepo/.github/actions/ecs-codedeploy@main
          if: fromJSON(inputs.terraform-output).ecs-task-containerName.value != ''
          with:
            docker-image-name: ${{steps.docker-build.outputs.docker-image-name}}
            terraform-output: ${{ inputs.terraform-output }}
            name: ${{inputs.scope}}        
  
    production:
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4 
        - name: AWS Credentials
          id: aws-creds
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: us-east-1
            role-to-assume: arn:aws:iam::996905175585:role/PocketGHARole
        - name: Build Client
          id: docker-build
          uses: './.github/actions/containerize'
          with:
            docker-repo-name: "996905175585.dkr.ecr.us-east-1.amazonaws.com/${{inputs.docker-repo-name}}-prod-app"
            push: true
            app-path: ${{ inputs.app-path }}
            app-port: 3000
            context: '.'
            dockerhub-username: ${{secrets.DOCKERHUB_USERNAME}}
            dockerhub-token: ${{secrets.DOCKERHUB_TOKEN}}
            scope: ${{ inputs.scope }}
            sentry-project: ''
            sentry-token: ${{secrets.SENTRY_BEARER}}
            assets-prefix: https://assets.getpocket.com/${{inputs.assets-prefix}}
            release-version: ${{inputs.release-version}}
            s3-bucket: readitlater-deploy
            s3-path: ${{inputs.assets-prefix}}
            aws-access-key-id: ${{ steps.aws-creds.outputs.aws-access-key-id }}
            aws-secret-key: ${{ steps.aws-creds.outputs.aws-secret-access-key }}
            aws-session-token: ${{ steps.aws-creds.outputs.aws-session-token}}
        - name: Code Deploy Docker Image
          uses:  pocket/pocket-monorepo/.github/actions/ecs-codedeploy@main
          if: fromJSON(inputs.terraform-output).ecs-task-containerName.value != ''
          with:
            docker-image-name: ${{steps.docker-build.outputs.docker-image-name}}
            terraform-output: ${{ inputs.terraform-output }}
            name: ${{ inputs.scope }}